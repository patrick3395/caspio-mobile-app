const fs = require('fs');
const path = 'src/app/pages/project-detail/project-detail.page.ts';
let text = fs.readFileSync(path, 'utf8');
const marker = '  getTemplateProgress(service: any): number {\n';
if (!text.includes(marker)) {
  throw new Error('getTemplateProgress marker not found');
}
const insert = `  getTemplateProgress(service: any): number {\n    // Calculate actual progress based on template sections\n    // For Engineers Foundation Evaluation, we average the sections\n\n    if (service.typeName === 'Engineers Foundation Evaluation') {\n      // Get stored progress values from localStorage (if available)\n      // These are set when user fills out the template form\n      const storageKey = \`template_progress_\${this.projectId}_\${service.serviceId}\`;\n      const storedProgress = localStorage.getItem(storageKey);\n\n      if (storedProgress) {\n        const progress = JSON.parse(storedProgress);\n        const projectProgress = progress.project || 0;\n        const structuralProgress = progress.structural || 0;\n        const elevationProgress = progress.elevation || 0;\n\n        // Calculate average of all three sections\n        const sections = [projectProgress, structuralProgress, elevationProgress];\n        const average = Math.round(sections.reduce((sum, val) => sum + val, 0) / sections.length);\n\n        return average;\n      }\n\n      // Default: if no stored progress, return 0\n      return 0;\n    }\n\n    // Default progress values for other service types\n    const serviceProgress: { [key: string]: number } = {\n      'Home Inspection Report': 75,\n      'Roof Inspection': 20,\n      'HVAC Assessment': 90,\n      'Electrical Inspection': 45,\n      'Plumbing Inspection': 60\n    };\n\n    // Return the progress for this service, or 0 if not found\n    return serviceProgress[service.typeName] || 0;\n  }\n\n  private isTemplateComplete(service: ServiceSelection): boolean {\n    if (!service) {\n      return false;\n    }\n\n    return this.getTemplateProgress(service) >= 100;\n  }\n\n  private async showIncompleteTemplateAlert(): Promise<void> {\n    const alert = await this.alertController.create({\n      header: 'Incomplete Template',\n      message: 'Please complete required fields before generating the report.',\n      buttons: ['OK']\n    });\n\n    await alert.present();\n  }\n\n`;
text = text.replace(marker, insert);
fs.writeFileSync(path, text);
