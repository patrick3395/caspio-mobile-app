from pathlib import Path
path = Path('src/app/pages/project-detail/project-detail.page.ts')
text = path.read_text()
old_block = "  async generateServicePDF() {\r\n    const templateServices = this.getServicesForTemplates();\r\n    const savedServices = templateServices.filter(service => !!service.serviceId);\r\n\r\n    if ((!templateServices || templateServices.length === 0) && (!savedServices || savedServices.length === 0)) {\r\n      await this.showToast('No templates available for PDF generation', 'warning');\r\n      return;\r\n    }\r\n\r\n    if (savedServices.length === 0) {\r\n      await this.showToast('Save the template service before generating a PDF', 'warning');\r\n      return;\r\n    }\r\n\r\n    if (savedServices.length === 1) {\\r\\n      const singleService = savedServices[0];\\r\\n\\r\\n      if (!this.isReadOnly && !this.isTemplateComplete(singleService)) {\\r\\n        await this.showIncompleteTemplateAlert();\\r\\n        return;\\r\\n      }\\r\\n\\r\\n      await this.generatePDFForService(singleService);\\r\\n      return;\\r\\n    }\r\n\r\n    const alert = await this.alertController.create({\r\n      header: 'Select Template',\r\n      message: 'Choose a template to open its PDF report.',\r\n      inputs: savedServices.map((service, index) => ({\r\n        type: 'radio',\r\n        label: ${service.typeName} - ,\r\n        value: index,\r\n        checked: index === 0\r\n      })),\r\n      buttons: [\r\n        {\r\n          text: 'Cancel',\r\n          role: 'cancel'\r\n        },\r\n        {\r\n          text: 'Open PDF',\r\n          handler: async (selectedIndex) => {\r\n            const index = typeof selectedIndex === 'number' ? selectedIndex : parseInt(String(selectedIndex), 10);\r\n            const selectedService = savedServices[index];\r\n\r\n            if (!selectedService) {\\r\\n              await this.showToast('Unable to determine which template to open. Please try again.', 'danger');\\r\\n              return false;\\r\\n            }\\r\\n\\r\\n            if (!this.isReadOnly && !this.isTemplateComplete(selectedService)) {\\r\\n              await this.showIncompleteTemplateAlert();\\r\\n              return false;\\r\\n            }\\r\\n\\r\\n            await this.generatePDFForService(selectedService);\\r\\n            return true;\r\n          }\r\n        },\r\n      ],\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n"
new_block = "  async generateServicePDF() {\r\n    const templateServices = this.getServicesForTemplates();\r\n    const savedServices = templateServices.filter(service => !!service.serviceId);\r\n\r\n    if ((!templateServices || templateServices.length === 0) && (!savedServices || savedServices.length === 0)) {\r\n      await this.showToast('No templates available for PDF generation', 'warning');\r\n      return;\r\n    }\r\n\r\n    if (savedServices.length === 0) {\r\n      await this.showToast('Save the template service before generating a PDF', 'warning');\r\n      return;\r\n    }\r\n\r\n    if (savedServices.length === 1) {\r\n      const singleService = savedServices[0];\r\n\r\n      if (!this.isReadOnly && !this.isTemplateComplete(singleService)) {\r\n        await this.showIncompleteTemplateAlert();\r\n        return;\r\n      }\r\n\r\n      await this.generatePDFForService(singleService);\r\n      return;\r\n    }\r\n\r\n    const alert = await this.alertController.create({\r\n      header: 'Select Template',\r\n      message: 'Choose a template to open its PDF report.',\r\n      inputs: savedServices.map((service, index) => ({\r\n        type: 'radio',\r\n        label: ${service.typeName} - ,\r\n        value: index,\r\n        checked: index === 0\r\n      })),\r\n      buttons: [\r\n        {\r\n          text: 'Cancel',\r\n          role: 'cancel'\r\n        },\r\n        {\r\n          text: 'Open PDF',\r\n          handler: async (selectedIndex) => {\r\n            const index = typeof selectedIndex === 'number' ? selectedIndex : parseInt(String(selectedIndex), 10);\r\n            const selectedService = savedServices[index];\r\n\r\n            if (!selectedService) {\r\n              await this.showToast('Unable to determine which template to open. Please try again.', 'danger');\r\n              return false;\r\n            }\r\n\r\n            if (!this.isReadOnly && !this.isTemplateComplete(selectedService)) {\r\n              await this.showIncompleteTemplateAlert();\r\n              return false;\r\n            }\r\n\r\n            await this.generatePDFForService(selectedService);\r\n            return true;\r\n          }\r\n        },\r\n      ],\r\n    });\r\n\r\n    await alert.present();\r\n  }\r\n"
if old_block not in text:
    raise SystemExit('old block not found')
text = text.replace(old_block, new_block)
path.write_text(text)
