diff --git a/src/app/pages/project-detail/project-detail.page.ts b/src/app/pages/project-detail/project-detail.page.ts
--- a/src/app/pages/project-detail/project-detail.page.ts
+++ b/src/app/pages/project-detail/project-detail.page.ts
@@
-import { DocumentViewerComponent } from '../../components/document-viewer/document-viewer.component';
 import { ImageCompressionService } from '../../services/image-compression.service';
-import { PdfPreviewComponent } from '../../components/pdf-preview/pdf-preview.component';
 import { EngineersFoundationDataService } from '../engineers-foundation/engineers-foundation-data.service';
 import { firstValueFrom } from 'rxjs';
 import { environment } from '../../../environments/environment';
+
+type DocumentViewerCtor = typeof import('../../components/document-viewer/document-viewer.component')['DocumentViewerComponent'];
+type PdfPreviewCtor = typeof import('../../components/pdf-preview/pdf-preview.component')['PdfPreviewComponent'];
@@
-  // Navigation flag to prevent double-clicks
-  isNavigating = false;
+  // Navigation flag to prevent double-clicks
+  isNavigating = false;
+
+  private documentViewerComponent?: DocumentViewerCtor;
+  private pdfPreviewComponent?: PdfPreviewCtor;
+  private templateServicesCache: ServiceSelection[] = [];
+  private templateServicesCacheKey = '';
+
+  private async loadDocumentViewer(): Promise<DocumentViewerCtor> {
+    if (!this.documentViewerComponent) {
+      const module = await import('../../components/document-viewer/document-viewer.component');
+      this.documentViewerComponent = module.DocumentViewerComponent;
+    }
+    return this.documentViewerComponent;
+  }
+
+  private async loadPdfPreview(): Promise<PdfPreviewCtor> {
+    if (!this.pdfPreviewComponent) {
+      const module = await import('../../components/pdf-preview/pdf-preview.component');
+      this.pdfPreviewComponent = module.PdfPreviewComponent;
+    }
+    return this.pdfPreviewComponent;
+  }
@@
-  getServicesForTemplates(): ServiceSelection[] {
-    // Filter out services that don't need templates
-    const filtered = this.selectedServices.filter(service =>
-      {
-        const name = service.typeName?.toLowerCase() || '';
-        // Exclude Defect Cost Report and Engineers Inspection Review
-        return !name.includes('defect cost report') &&
-               !name.includes('engineers inspection review') &&
-               !name.includes('engineer\'s inspection review');
-      });
-
-    // Debug: Show first service icon data
-
-    return filtered;
-  }
-
-
+  getServicesForTemplates(): ServiceSelection[] {
+    const cacheKey = this.selectedServices
+      .map(service => `${service.offersId}:${service.instanceId}:${service.serviceId ?? ''}`)
+      .join('|');
+
+    if (cacheKey !== this.templateServicesCacheKey) {
+      this.templateServicesCacheKey = cacheKey;
+      this.templateServicesCache = this.selectedServices.filter(service => {
+        const name = service.typeName?.toLowerCase() || '';
+        return !name.includes('defect cost report') &&
+               !name.includes('engineers inspection review') &&
+               !name.includes("engineer's inspection review");
+      });
+    }
+
+    return this.templateServicesCache;
+  }
+
+  trackTemplateService(_: number, service: ServiceSelection) {
+    return `${service.offersId}-${service.instanceId}`;
+  }
+
+  trackServiceDocument(_: number, group: ServiceDocumentGroup) {
+    return `${group.serviceId}-${group.instanceNumber}`;
+  }
+
+  trackDocument(_: number, doc: DocumentItem) {
+    return doc.attachId || doc.title;
+  }
+
+
   formatDateForInput(dateString: string): string {
@@
-          if (isPDF) {
-            console.log('📑 Opening PDF with DocumentViewerComponent');
-            // Use DocumentViewerComponent for PDFs
-            const modal = await this.modalController.create({
-              component: DocumentViewerComponent,
+          if (isPDF) {
+            console.log('📑 Opening PDF with DocumentViewerComponent');
+            // Use DocumentViewerComponent for PDFs
+            const DocumentViewerComponent = await this.loadDocumentViewer();
+            const modal = await this.modalController.create({
+              component: DocumentViewerComponent,
@@
-          if (isPDF) {
-            console.log('📑 Opening PDF with DocumentViewerComponent');
-            // Use DocumentViewerComponent for PDFs
-            const modal = await this.modalController.create({
-              component: DocumentViewerComponent,
+          if (isPDF) {
+            console.log('📑 Opening PDF with DocumentViewerComponent');
+            // Use DocumentViewerComponent for PDFs
+            const DocumentViewerComponent = await this.loadDocumentViewer();
+            const modal = await this.modalController.create({
+              component: DocumentViewerComponent,
@@
-      const modal = await this.modalController.create({
-        component: PdfPreviewComponent,
+      const PdfPreviewComponent = await this.loadPdfPreview();
+      const modal = await this.modalController.create({
+        component: PdfPreviewComponent,
