<ion-header>
  <ion-toolbar>
    <ion-buttons slot="start">
      <ion-button (click)="goBack()" fill="clear">
        <ion-icon slot="icon-only" name="arrow-back"></ion-icon>
      </ion-button>
    </ion-buttons>
  </ion-toolbar>
</ion-header>

<ion-content>
  <!-- Loading state -->
  <div *ngIf="loading" class="loading-container">
    <ion-spinner name="crescent"></ion-spinner>
    <p>Loading project...</p>
  </div>

  <!-- Error state -->
  <div *ngIf="error && !loading" class="error-container">
    <ion-text color="danger">
      <h2>Project Not Found</h2>
      <p>The requested project could not be found.</p>
    </ion-text>
    <ion-button (click)="goBack()" color="primary">Back to Projects</ion-button>
  </div>

  <!-- Project details -->
  <div *ngIf="project && !loading && !error" class="project-container">
    <!-- Property Photo Header -->
    <div class="street-view-header" style="position: relative;">
      <img [src]="getPropertyPhotoUrl()" 
           alt="Property Photo"
           (error)="onPhotoError($event)">
      <!-- Replace Photo Button -->
      <ion-button class="replace-photo-btn" 
                  fill="solid" 
                  color="primary" 
                  size="small"
                  *ngIf="!isReadOnly"
                  (click)="replacePhoto()"
                  style="position: absolute; bottom: 10px; right: 10px; z-index: 10;">
        <ion-icon name="camera" slot="start"></ion-icon>
        Replace Photo
      </ion-button>
    </div>

    <!-- Read-only indicator for non-active projects -->
    <div *ngIf="isReadOnly" class="read-only-banner">
      <ion-icon name="eye-outline"></ion-icon>
      <span>Project is not active</span>
    </div>

    <!-- Project Information Section -->
    <div class="info-section">
      <h2 class="section-title">Project Information</h2>

      <div class="info-row">
        <span class="info-label">Company:</span>
        <span class="info-value">{{ getCompanyName() }}</span>
      </div>

      <div class="info-row">
        <span class="info-label">Address:</span>
        <span class="info-value">{{ project.Address || 'Not specified' }}</span>
      </div>
      
      <div class="info-row">
        <span class="info-label">City, State Zip:</span>
        <span class="info-value">{{ getCityStateZip() }}</span>
      </div>
      
      <div class="info-row">
        <span class="info-label">Inspection Date:</span>
        <span class="info-value">{{ formatDate(project.InspectionDate) }}</span>
      </div>
      
      <div class="info-row">
        <span class="info-label">Project ID:</span>
        <span class="info-value">#{{ project.PK_ID || project.ProjectID }}</span>
      </div>
    </div>

    <!-- Reports Section -->
    <div class="info-section" *ngIf="getServicesForTemplates().length > 0">
      <h2 class="section-title">Reports</h2>

      <div class="templates-container">
        <div *ngFor="let service of getServicesForTemplates()"
             class="template-bar"
             (click)="handleTemplateClick(service, $event)">

          <!-- Progress fill background -->
          <div class="template-progress"
               [style.width.%]="getTemplateProgress(service)">
          </div>

          <!-- Service name and info overlay -->
          <div class="template-content">
            <div class="template-name">
              <img *ngIf="service.typeIconUrl" [src]="service.typeIconUrl" class="report-icon" alt="">
              {{ service.typeName }}
              <span *ngIf="getServiceCount(service.offersId) > 1" class="template-instance">
                (Instance {{ getServiceInstanceNumber(service) }})
              </span>
            </div>

          </div>
        </div>
      </div>
    </div>

    <!-- Service Selection Section -->
    <div class="info-section">
      <h2 class="section-title">Services</h2>
      <div class="section-button-area" *ngIf="isReadOnly">
        <ion-button size="small"
                    fill="outline"
                    color="primary"
                    (click)="addAdditionalService()">
          <ion-icon name="add-circle-outline" slot="start"></ion-icon>
          Add Additional Service
        </ion-button>
      </div>
      
      <!-- Loading services -->
      <div *ngIf="loadingServices" class="services-loading">
        <ion-spinner name="crescent"></ion-spinner>
        <span>Loading services...</span>
      </div>
      
      <!-- Service checkboxes for active projects -->
      <div *ngIf="!loadingServices && !isReadOnly" class="services-grid">
        <div *ngFor="let offer of availableOffers" 
             class="service-item">
          <ion-checkbox 
            [checked]="isServiceSelected(offer.OffersID)"
            (ionChange)="toggleService($event, offer)"
            [disabled]="updatingServices">
          </ion-checkbox>
          <label (click)="toggleServiceByLabel(offer)"
                 style="cursor: pointer">
            {{ offer.TypeShort ? offer.TypeShort + ' - ' + offer.TypeName : (offer.TypeName || offer.Service_Name || offer.Description) }}
          </label>
        </div>
      </div>
      
      <!-- Services performed list for read-only projects -->
      <div *ngIf="!loadingServices && isReadOnly && selectedServices.length > 0" class="services-performed-list">
        <div *ngFor="let service of selectedServices" class="performed-service-item">
          <ion-icon name="checkmark-circle" color="success"></ion-icon>
          <span class="service-name">{{ service.typeName }}</span>
          <span *ngIf="getServiceCount(service.offersId) > 1" class="instance-badge">
            #{{ getServiceInstanceNumber(service) }}
          </span>
        </div>
      </div>
      
      <!-- No services message for read-only projects -->
      <div *ngIf="!loadingServices && isReadOnly && selectedServices.length === 0" class="no-services-performed">
        <ion-text color="medium">
          <p>No services have been performed yet.</p>
        </ion-text>
      </div>
      
      <!-- Selected Services Table -->
      <div *ngIf="selectedServices.length > 0" class="selected-services-table">
        <div style="display: flex; justify-content: space-between; align-items: center;">
          <h3>Selected Services</h3>
        </div>
        <div class="services-table">
          <div class="table-header">
            <div class="col-service">Service</div>
            <div class="col-date">Inspection Date</div>
            <div class="col-actions">Actions</div>
          </div>
          <div *ngFor="let service of selectedServices" class="service-row-container">
            <div class="table-row">
              <div class="col-service">
                <span>{{ service.typeName }}</span>
                <span *ngIf="getServiceCount(service.offersId) > 1" class="instance-badge">
                  #{{ getServiceInstanceNumber(service) }}
                </span>
              </div>
              <div class="col-date">
                <input 
                  type="date" 
                  class="date-input"
                  [value]="formatDateForInput(service.dateOfInspection)"
                  (change)="updateServiceDateFromInput(service, $event)"
                  [disabled]="updatingServices || isReadOnly"
                  [readonly]="isReadOnly">
                <span *ngIf="service.saving" class="saving-indicator">
                  <ion-spinner name="dots"></ion-spinner>
                </span>
                <span *ngIf="service.saved" class="saved-indicator">
                  <ion-icon name="checkmark-circle" color="success"></ion-icon>
                </span>
              </div>
              <div class="col-actions" *ngIf="!isReadOnly">
                <ion-button
                  size="small"
                  fill="clear"
                  style="--color: #F15A27;"
                  (click)="removeServiceInstance(service)"
                  [disabled]="updatingServices">
                  <ion-icon name="trash-outline"></ion-icon>
                </ion-button>
                <ion-button 
                  size="small" 
                  fill="clear" 
                  color="primary"
                  (click)="duplicateService(service.offersId, service.typeName)"
                  [disabled]="updatingServices">
                  <ion-icon name="copy-outline"></ion-icon>
                </ion-button>
              </div>
            </div>
            <!-- Price row directly under service -->
            <div class="service-price-row">
              <div class="price-line"></div>
              <div class="service-price">
                ${{ getServicePrice(service) | number:'1.2-2' }}
              </div>
            </div>
          </div>
        </div>
        
        <!-- Services Total -->
        <div class="services-total-row">
          <div class="total-label">Total:</div>
          <div class="total-amount">${{ calculateServicesTotal() | number:'1.2-2' }}</div>
        </div>
      </div>
    </div>

    <!-- Support Documents Section -->
    <div class="info-section">
      <h2 class="section-title">Support Documents</h2>
      
      <!-- Loading documents -->
      <div *ngIf="loadingDocuments" class="documents-loading">
        <ion-spinner name="crescent"></ion-spinner>
        <span>Loading documents...</span>
      </div>
      
      <!-- No services selected -->
      <div *ngIf="!loadingDocuments && selectedServices.length === 0" class="no-services-message">
        <ion-text color="medium">
          <p>Please select services above to see required documents.</p>
        </ion-text>
      </div>
      
      <!-- Documents table -->
      <table *ngIf="!loadingDocuments && selectedServices.length > 0" class="documents-table">
        <!-- Dynamic documents based on selected services -->
        <tbody *ngFor="let serviceDoc of serviceDocuments" class="service-doc-group">

          <!-- If no documents, show service with "No required documents" -->
          <tr *ngIf="serviceDoc.documents.length === 0">
            <td class="service-name-cell" [rowspan]="2">
              <div class="service-name-content" [class.all-docs-uploaded]="areAllRequiredDocsUploaded(serviceDoc)">
                {{ serviceDoc.serviceName }}
                <span *ngIf="serviceDoc.instanceNumber > 1" class="instance-badge">
                  #{{ serviceDoc.instanceNumber }}
                </span>
              </div>
            </td>
            <td class="doc-cell">
              <span style="color: #999; font-style: italic;">No required documents</span>
            </td>
          </tr>
          <tr *ngIf="serviceDoc.documents.length === 0">
            <td class="doc-cell">
              <a (click)="showOptionalDocuments(serviceDoc)" class="add-doc-link" *ngIf="!isReadOnly">
                + Add Document
              </a>
            </td>
          </tr>

          <!-- If has documents, show them -->
          <ng-container *ngIf="serviceDoc.documents.length > 0">
            <!-- First document row with service name -->
            <tr class="doc-row" [class.uploaded]="serviceDoc.documents[0].uploaded">
              <td class="service-name-cell" [rowspan]="serviceDoc.documents.length + 1">
                <div class="service-name-content" [class.all-docs-uploaded]="areAllRequiredDocsUploaded(serviceDoc)">
                  {{ serviceDoc.serviceName }}
                  <span *ngIf="serviceDoc.instanceNumber > 1" class="instance-badge">
                    #{{ serviceDoc.instanceNumber }}
                  </span>
                </div>
                <div class="service-actions" *ngIf="serviceDoc.documents[0].uploaded">
                  <ion-button size="small" fill="clear" color="primary"
                              (click)="viewDocument(serviceDoc.documents[0])"
                              title="View">
                    <ion-icon name="eye-outline" slot="icon-only"></ion-icon>
                  </ion-button>
                  <ion-button size="small" fill="clear" style="--color: #F15A27;"
                              *ngIf="!isReadOnly"
                              (click)="deleteRequiredDocument(serviceDoc.serviceId, serviceDoc.documents[0])"
                              title="Delete">
                    <ion-icon name="trash-outline" slot="icon-only"></ion-icon>
                  </ion-button>
                </div>
              </td>
              <td class="doc-cell">
                <div *ngIf="serviceDoc.documents[0].uploaded">
                  <span class="uploaded-text">
                    <ion-icon name="checkmark-circle" class="upload-check"></ion-icon>
                    {{ serviceDoc.documents[0].title }}
                  </span>
                  <div class="uploaded-file-info">
                    <ion-icon name="document-attach-outline"></ion-icon>
                    {{ serviceDoc.documents[0].linkName || serviceDoc.documents[0].filename }}
                  </div>
                  <a (click)="uploadAdditionalFile(serviceDoc.serviceId, serviceDoc.typeId, serviceDoc.documents[0])"
                     class="upload-another-link" *ngIf="!isReadOnly">
                    <ion-icon name="add-circle-outline"></ion-icon>
                    Upload Another
                  </a>
                </div>
                <div *ngIf="!serviceDoc.documents[0].uploaded">
                  {{ serviceDoc.documents[0].title }}
                  <ion-button
                    size="small"
                    fill="clear"
                    color="primary"
                    class="sleek-upload-btn"
                    (click)="uploadDocument(serviceDoc.serviceId, serviceDoc.typeId, serviceDoc.documents[0])">
                    <ion-icon name="cloud-upload-outline" slot="start"></ion-icon>
                    Upload Document
                  </ion-button>
                </div>
              </td>
            </tr>

            <!-- Remaining document rows -->
            <tr *ngFor="let doc of serviceDoc.documents.slice(1)"
                class="doc-row"
                [class.uploaded]="doc.uploaded">
              <td class="doc-cell">
                <div *ngIf="doc.uploaded">
                  <span class="uploaded-text">
                    <ion-icon name="checkmark-circle" class="upload-check"></ion-icon>
                    {{ doc.title }}
                  </span>
                  <div class="uploaded-file-info">
                    <ion-icon name="document-attach-outline"></ion-icon>
                    {{ doc.linkName || doc.filename }}
                  </div>
                <!-- First file -->
                <div class="doc-info-row">
                  <div class="doc-link-name">
                    <ion-icon name="document-attach-outline"></ion-icon>
                    {{ doc.linkName || doc.filename }}
                  </div>
                  <div class="doc-icon-actions">
                    <ion-button size="small" fill="clear" color="primary" 
                                (click)="viewDocument(doc)" 
                                title="View">
                      <ion-icon name="eye-outline" slot="icon-only"></ion-icon>
                    </ion-button>
                    <ion-button size="small" fill="clear" style="--color: #F15A27;"
                                *ngIf="!isReadOnly"
                                (click)="deleteRequiredDocument(serviceDoc.serviceId, doc)"
                                title="Delete">
                      <ion-icon name="trash-outline" slot="icon-only"></ion-icon>
                    </ion-button>
                  </div>
                </div>
                
                <!-- Additional files if any -->
                <div *ngFor="let additionalFile of doc.additionalFiles" class="doc-info-row">
                  <div class="doc-link-name">
                    <ion-icon name="document-attach-outline"></ion-icon>
                    {{ additionalFile.linkName }}
                  </div>
                  <div class="doc-icon-actions">
                    <ion-button size="small" fill="clear" color="primary" 
                                (click)="viewAdditionalDocument(additionalFile)" 
                                title="View">
                      <ion-icon name="eye-outline" slot="icon-only"></ion-icon>
                    </ion-button>
                    <ion-button size="small" fill="clear" style="--color: #F15A27;"
                                *ngIf="!isReadOnly"
                                (click)="deleteAdditionalFile(serviceDoc.serviceId, additionalFile)"
                                title="Delete">
                      <ion-icon name="trash-outline" slot="icon-only"></ion-icon>
                    </ion-button>
                  </div>
                </div>
                
                <!-- Upload another document button -->
                <ion-button 
                  *ngIf="!isReadOnly"
                  size="small" 
                  fill="clear" 
                  color="primary" 
                  class="sleek-upload-additional-btn"
                  (click)="uploadAdditionalFile(serviceDoc.serviceId, serviceDoc.typeId, doc)">
                  <ion-icon name="add-circle-outline" slot="start"></ion-icon>
                  Upload Another
                </ion-button>
              </div>
            </td>
            <td class="doc-actions">
              <div class="doc-icon-actions">
                <ion-button *ngIf="doc.uploaded" size="small" fill="clear" color="primary"
                            (click)="viewDocument(doc)"
                            title="View">
                  <ion-icon name="eye-outline" slot="icon-only"></ion-icon>
                </ion-button>
                <ion-button *ngIf="doc.uploaded && !isReadOnly" size="small" fill="clear" style="--color: #F15A27;"
                            (click)="deleteRequiredDocument(serviceDoc.serviceId, doc)"
                            title="Delete">
                  <ion-icon name="trash-outline" slot="icon-only"></ion-icon>
                </ion-button>
              </div>
            </td>
          </tr>

          <!-- Add optional documents link -->
          <tr class="add-doc-row" *ngIf="!isReadOnly">
            <td class="doc-name">
              <a (click)="showOptionalDocuments(serviceDoc)" class="add-doc-link">
                + Add Document
              </a>
            </td>
            <td class="doc-actions"></td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>

  <!-- File upload input (hidden) -->
  <input 
    #fileInput 
    type="file" 
    style="display: none" 
    (change)="handleFileSelect($event)"
    accept="image/*,.pdf,.doc,.docx">
</ion-content>

<!-- Optional Documents Modal -->
<ion-modal #optionalDocsModal>
  <ng-template>
    <ion-header>
      <ion-toolbar>
        <ion-title>Add Document</ion-title>
        <ion-buttons slot="end">
          <ion-button (click)="closeOptionalDocsModal()">Close</ion-button>
        </ion-buttons>
      </ion-toolbar>
    </ion-header>
    <ion-content>
      <ion-list>
        <!-- Custom document option -->
        <ion-item>
          <ion-label position="stacked">Custom Document</ion-label>
          <ion-input 
            #customDocInput
            placeholder="Enter document name (e.g., Cubicasa)"
            (keyup.enter)="addCustomDocument((customDocInput.value || '').toString()); customDocInput.value=''">
          </ion-input>
          <ion-button slot="end" fill="clear" (click)="addCustomDocument((customDocInput.value || '').toString()); customDocInput.value=''">
            <ion-icon name="add-circle-outline"></ion-icon>
          </ion-button>
        </ion-item>
        
        <ion-item-divider>
          <ion-label>Suggested Documents</ion-label>
        </ion-item-divider>
        
        <ion-item *ngFor="let doc of optionalDocumentsList" (click)="addOptionalDocument(doc)">
          <ion-label>
            <h2>{{ doc.title }}</h2>
            <p>{{ doc.required ? 'Required' : 'Optional' }}</p>
          </ion-label>
        </ion-item>
      </ion-list>
    </ion-content>
  </ng-template>
</ion-modal>

<!-- Hidden file input for photo replacement - no capture attribute for iOS native picker -->
<input #photoInput type="file" accept="image/*" style="display: none" (change)="onPhotoSelected($event)">
